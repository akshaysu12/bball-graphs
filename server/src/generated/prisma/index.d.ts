// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  boxScoreAdvanced: (where?: BoxScoreAdvancedWhereInput) => Promise<boolean>;
  boxScoreTraditional: (
    where?: BoxScoreTraditionalWhereInput
  ) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  boxScoreAdvanced: (
    where: BoxScoreAdvancedWhereUniqueInput
  ) => BoxScoreAdvancedPromise;
  boxScoreAdvanceds: (
    args?: {
      where?: BoxScoreAdvancedWhereInput;
      orderBy?: BoxScoreAdvancedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<BoxScoreAdvanced>;
  boxScoreAdvancedsConnection: (
    args?: {
      where?: BoxScoreAdvancedWhereInput;
      orderBy?: BoxScoreAdvancedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BoxScoreAdvancedConnectionPromise;
  boxScoreTraditional: (
    where: BoxScoreTraditionalWhereUniqueInput
  ) => BoxScoreTraditionalPromise;
  boxScoreTraditionals: (
    args?: {
      where?: BoxScoreTraditionalWhereInput;
      orderBy?: BoxScoreTraditionalOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<BoxScoreTraditional>;
  boxScoreTraditionalsConnection: (
    args?: {
      where?: BoxScoreTraditionalWhereInput;
      orderBy?: BoxScoreTraditionalOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BoxScoreTraditionalConnectionPromise;
  game: (where: GameWhereUniqueInput) => GamePromise;
  games: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Game>;
  gamesConnection: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GameConnectionPromise;
  player: (where: PlayerWhereUniqueInput) => PlayerPromise;
  players: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Player>;
  playersConnection: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlayerConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoxScoreAdvanced: (
    data: BoxScoreAdvancedCreateInput
  ) => BoxScoreAdvancedPromise;
  updateBoxScoreAdvanced: (
    args: {
      data: BoxScoreAdvancedUpdateInput;
      where: BoxScoreAdvancedWhereUniqueInput;
    }
  ) => BoxScoreAdvancedPromise;
  updateManyBoxScoreAdvanceds: (
    args: {
      data: BoxScoreAdvancedUpdateManyMutationInput;
      where?: BoxScoreAdvancedWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertBoxScoreAdvanced: (
    args: {
      where: BoxScoreAdvancedWhereUniqueInput;
      create: BoxScoreAdvancedCreateInput;
      update: BoxScoreAdvancedUpdateInput;
    }
  ) => BoxScoreAdvancedPromise;
  deleteBoxScoreAdvanced: (
    where: BoxScoreAdvancedWhereUniqueInput
  ) => BoxScoreAdvancedPromise;
  deleteManyBoxScoreAdvanceds: (
    where?: BoxScoreAdvancedWhereInput
  ) => BatchPayloadPromise;
  createBoxScoreTraditional: (
    data: BoxScoreTraditionalCreateInput
  ) => BoxScoreTraditionalPromise;
  updateBoxScoreTraditional: (
    args: {
      data: BoxScoreTraditionalUpdateInput;
      where: BoxScoreTraditionalWhereUniqueInput;
    }
  ) => BoxScoreTraditionalPromise;
  updateManyBoxScoreTraditionals: (
    args: {
      data: BoxScoreTraditionalUpdateManyMutationInput;
      where?: BoxScoreTraditionalWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertBoxScoreTraditional: (
    args: {
      where: BoxScoreTraditionalWhereUniqueInput;
      create: BoxScoreTraditionalCreateInput;
      update: BoxScoreTraditionalUpdateInput;
    }
  ) => BoxScoreTraditionalPromise;
  deleteBoxScoreTraditional: (
    where: BoxScoreTraditionalWhereUniqueInput
  ) => BoxScoreTraditionalPromise;
  deleteManyBoxScoreTraditionals: (
    where?: BoxScoreTraditionalWhereInput
  ) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (
    args: { data: GameUpdateInput; where: GameWhereUniqueInput }
  ) => GamePromise;
  updateManyGames: (
    args: { data: GameUpdateManyMutationInput; where?: GameWhereInput }
  ) => BatchPayloadPromise;
  upsertGame: (
    args: {
      where: GameWhereUniqueInput;
      create: GameCreateInput;
      update: GameUpdateInput;
    }
  ) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (
    args: { data: PlayerUpdateInput; where: PlayerWhereUniqueInput }
  ) => PlayerPromise;
  updateManyPlayers: (
    args: { data: PlayerUpdateManyMutationInput; where?: PlayerWhereInput }
  ) => BatchPayloadPromise;
  upsertPlayer: (
    args: {
      where: PlayerWhereUniqueInput;
      create: PlayerCreateInput;
      update: PlayerUpdateInput;
    }
  ) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  boxScoreAdvanced: (
    where?: BoxScoreAdvancedSubscriptionWhereInput
  ) => BoxScoreAdvancedSubscriptionPayloadSubscription;
  boxScoreTraditional: (
    where?: BoxScoreTraditionalSubscriptionWhereInput
  ) => BoxScoreTraditionalSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nbaGameId_ASC"
  | "nbaGameId_DESC"
  | "season_ASC"
  | "season_DESC"
  | "result_ASC"
  | "result_DESC"
  | "date_ASC"
  | "date_DESC"
  | "home_ASC"
  | "home_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoxScoreAdvancedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "offensiveRating_ASC"
  | "offensiveRating_DESC"
  | "defensiveRating_ASC"
  | "defensiveRating_DESC"
  | "netRating_ASC"
  | "netRating_DESC"
  | "assistPercentage_ASC"
  | "assistPercentage_DESC"
  | "assistToTurnovers_ASC"
  | "assistToTurnovers_DESC"
  | "assistRatio_ASC"
  | "assistRatio_DESC"
  | "offensiveReboundPercentage_ASC"
  | "offensiveReboundPercentage_DESC"
  | "defensiveReboundPercentage_ASC"
  | "defensiveReboundPercentage_DESC"
  | "reboundPercentage_ASC"
  | "reboundPercentage_DESC"
  | "effectiveFieldGoalPercentage_ASC"
  | "effectiveFieldGoalPercentage_DESC"
  | "trueShootingPercentage_ASC"
  | "trueShootingPercentage_DESC"
  | "usagePercentage_ASC"
  | "usagePercentage_DESC"
  | "pace_ASC"
  | "pace_DESC"
  | "PIE_ASC"
  | "PIE_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoxScoreTraditionalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "points_ASC"
  | "points_DESC"
  | "minutes_ASC"
  | "minutes_DESC"
  | "fieldGoalsMade_ASC"
  | "fieldGoalsMade_DESC"
  | "fieldGoalsAttempted_ASC"
  | "fieldGoalsAttempted_DESC"
  | "fieldGoalPercentage_ASC"
  | "fieldGoalPercentage_DESC"
  | "threePtsMade_ASC"
  | "threePtsMade_DESC"
  | "threePtsAttempted_ASC"
  | "threePtsAttempted_DESC"
  | "threePtPercentage_ASC"
  | "threePtPercentage_DESC"
  | "freeThrowsMade_ASC"
  | "freeThrowsMade_DESC"
  | "freeThrowsAttempts_ASC"
  | "freeThrowsAttempts_DESC"
  | "freeThrowsPercentage_ASC"
  | "freeThrowsPercentage_DESC"
  | "rebounds_ASC"
  | "rebounds_DESC"
  | "offensiveRebounds_ASC"
  | "offensiveRebounds_DESC"
  | "defensiveRebounds_ASC"
  | "defensiveRebounds_DESC"
  | "assists_ASC"
  | "assists_DESC"
  | "steals_ASC"
  | "steals_DESC"
  | "blocks_ASC"
  | "blocks_DESC"
  | "turnovers_ASC"
  | "turnovers_DESC"
  | "plusMinus_ASC"
  | "plusMinus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nbaStatsId_ASC"
  | "nbaStatsId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nbaStatsId_ASC"
  | "nbaStatsId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "conference_ASC"
  | "conference_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PlayerUpdateseasonsInput {
  set?: String[] | String;
}

export type BoxScoreAdvancedWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TeamUpsertNestedInput {
  update: TeamUpdateDataInput;
  create: TeamCreateInput;
}

export interface PlayerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nbaStatsId?: Int;
  nbaStatsId_not?: Int;
  nbaStatsId_in?: Int[] | Int;
  nbaStatsId_not_in?: Int[] | Int;
  nbaStatsId_lt?: Int;
  nbaStatsId_lte?: Int;
  nbaStatsId_gt?: Int;
  nbaStatsId_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  Games_every?: GameWhereInput;
  Games_some?: GameWhereInput;
  Games_none?: GameWhereInput;
  AND?: PlayerWhereInput[] | PlayerWhereInput;
  OR?: PlayerWhereInput[] | PlayerWhereInput;
  NOT?: PlayerWhereInput[] | PlayerWhereInput;
}

export interface GameCreateOneWithoutBoxScoreAdvancedInput {
  create?: GameCreateWithoutBoxScoreAdvancedInput;
  connect?: GameWhereUniqueInput;
}

export interface GameUpdateWithoutBoxScoreTraditionalDataInput {
  player?: PlayerUpdateOneRequiredWithoutGamesInput;
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
  team?: TeamUpdateOneRequiredInput;
  opponent?: TeamUpdateOneRequiredInput;
  boxScoreAdvanced?: BoxScoreAdvancedUpdateOneWithoutGameInput;
}

export interface GameCreateWithoutBoxScoreAdvancedInput {
  player: PlayerCreateOneWithoutGamesInput;
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeInput;
  home: Boolean;
  team: TeamCreateOneInput;
  opponent: TeamCreateOneInput;
  boxScoreTraditional?: BoxScoreTraditionalCreateOneWithoutGameInput;
}

export interface BoxScoreTraditionalUpdateOneWithoutGameInput {
  create?: BoxScoreTraditionalCreateWithoutGameInput;
  update?: BoxScoreTraditionalUpdateWithoutGameDataInput;
  upsert?: BoxScoreTraditionalUpsertWithoutGameInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BoxScoreTraditionalWhereUniqueInput;
}

export interface PlayerCreateOneWithoutGamesInput {
  create?: PlayerCreateWithoutGamesInput;
  connect?: PlayerWhereUniqueInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface PlayerCreateWithoutGamesInput {
  nbaStatsId: Int;
  name: String;
  seasons?: PlayerCreateseasonsInput;
}

export interface GameWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  player?: PlayerWhereInput;
  nbaGameId?: String;
  nbaGameId_not?: String;
  nbaGameId_in?: String[] | String;
  nbaGameId_not_in?: String[] | String;
  nbaGameId_lt?: String;
  nbaGameId_lte?: String;
  nbaGameId_gt?: String;
  nbaGameId_gte?: String;
  nbaGameId_contains?: String;
  nbaGameId_not_contains?: String;
  nbaGameId_starts_with?: String;
  nbaGameId_not_starts_with?: String;
  nbaGameId_ends_with?: String;
  nbaGameId_not_ends_with?: String;
  season?: String;
  season_not?: String;
  season_in?: String[] | String;
  season_not_in?: String[] | String;
  season_lt?: String;
  season_lte?: String;
  season_gt?: String;
  season_gte?: String;
  season_contains?: String;
  season_not_contains?: String;
  season_starts_with?: String;
  season_not_starts_with?: String;
  season_ends_with?: String;
  season_not_ends_with?: String;
  result?: String;
  result_not?: String;
  result_in?: String[] | String;
  result_not_in?: String[] | String;
  result_lt?: String;
  result_lte?: String;
  result_gt?: String;
  result_gte?: String;
  result_contains?: String;
  result_not_contains?: String;
  result_starts_with?: String;
  result_not_starts_with?: String;
  result_ends_with?: String;
  result_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  home?: Boolean;
  home_not?: Boolean;
  team?: TeamWhereInput;
  opponent?: TeamWhereInput;
  boxScoreTraditional?: BoxScoreTraditionalWhereInput;
  boxScoreAdvanced?: BoxScoreAdvancedWhereInput;
  AND?: GameWhereInput[] | GameWhereInput;
  OR?: GameWhereInput[] | GameWhereInput;
  NOT?: GameWhereInput[] | GameWhereInput;
}

export interface PlayerCreateseasonsInput {
  set?: String[] | String;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameWhereInput;
  AND?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  OR?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  NOT?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
}

export interface TeamCreateOneInput {
  create?: TeamCreateInput;
  connect?: TeamWhereUniqueInput;
}

export interface BoxScoreAdvancedSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BoxScoreAdvancedWhereInput;
  AND?:
    | BoxScoreAdvancedSubscriptionWhereInput[]
    | BoxScoreAdvancedSubscriptionWhereInput;
  OR?:
    | BoxScoreAdvancedSubscriptionWhereInput[]
    | BoxScoreAdvancedSubscriptionWhereInput;
  NOT?:
    | BoxScoreAdvancedSubscriptionWhereInput[]
    | BoxScoreAdvancedSubscriptionWhereInput;
}

export interface TeamCreateInput {
  nbaStatsId: Int;
  name: String;
  conference: String;
}

export interface TeamUpdateInput {
  nbaStatsId?: Int;
  name?: String;
  conference?: String;
}

export interface BoxScoreTraditionalCreateOneWithoutGameInput {
  create?: BoxScoreTraditionalCreateWithoutGameInput;
  connect?: BoxScoreTraditionalWhereUniqueInput;
}

export type BoxScoreTraditionalWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BoxScoreTraditionalCreateWithoutGameInput {
  points: Int;
  minutes: Float;
  fieldGoalsMade: Int;
  fieldGoalsAttempted: Int;
  fieldGoalPercentage: Float;
  threePtsMade: Int;
  threePtsAttempted: Int;
  threePtPercentage: Float;
  freeThrowsMade: Int;
  freeThrowsAttempts: Int;
  freeThrowsPercentage: Float;
  rebounds: Int;
  offensiveRebounds: Int;
  defensiveRebounds: Int;
  assists: Int;
  steals: Int;
  blocks: Int;
  turnovers: Int;
  plusMinus: Int;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface BoxScoreAdvancedUpdateInput {
  game?: GameUpdateOneRequiredWithoutBoxScoreAdvancedInput;
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface GameUpsertWithWhereUniqueWithoutPlayerInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutPlayerDataInput;
  create: GameCreateWithoutPlayerInput;
}

export interface GameUpdateOneRequiredWithoutBoxScoreAdvancedInput {
  create?: GameCreateWithoutBoxScoreAdvancedInput;
  update?: GameUpdateWithoutBoxScoreAdvancedDataInput;
  upsert?: GameUpsertWithoutBoxScoreAdvancedInput;
  connect?: GameWhereUniqueInput;
}

export interface GameUpdateWithoutPlayerDataInput {
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
  team?: TeamUpdateOneRequiredInput;
  opponent?: TeamUpdateOneRequiredInput;
  boxScoreTraditional?: BoxScoreTraditionalUpdateOneWithoutGameInput;
  boxScoreAdvanced?: BoxScoreAdvancedUpdateOneWithoutGameInput;
}

export interface GameUpdateWithoutBoxScoreAdvancedDataInput {
  player?: PlayerUpdateOneRequiredWithoutGamesInput;
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
  team?: TeamUpdateOneRequiredInput;
  opponent?: TeamUpdateOneRequiredInput;
  boxScoreTraditional?: BoxScoreTraditionalUpdateOneWithoutGameInput;
}

export interface GameUpdateManyWithoutPlayerInput {
  create?: GameCreateWithoutPlayerInput[] | GameCreateWithoutPlayerInput;
  delete?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  set?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  disconnect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
  update?:
    | GameUpdateWithWhereUniqueWithoutPlayerInput[]
    | GameUpdateWithWhereUniqueWithoutPlayerInput;
  upsert?:
    | GameUpsertWithWhereUniqueWithoutPlayerInput[]
    | GameUpsertWithWhereUniqueWithoutPlayerInput;
  deleteMany?: GameScalarWhereInput[] | GameScalarWhereInput;
  updateMany?:
    | GameUpdateManyWithWhereNestedInput[]
    | GameUpdateManyWithWhereNestedInput;
}

export interface PlayerUpdateOneRequiredWithoutGamesInput {
  create?: PlayerCreateWithoutGamesInput;
  update?: PlayerUpdateWithoutGamesDataInput;
  upsert?: PlayerUpsertWithoutGamesInput;
  connect?: PlayerWhereUniqueInput;
}

export interface PlayerUpdateInput {
  nbaStatsId?: Int;
  name?: String;
  seasons?: PlayerUpdateseasonsInput;
  Games?: GameUpdateManyWithoutPlayerInput;
}

export interface PlayerUpdateWithoutGamesDataInput {
  nbaStatsId?: Int;
  name?: String;
  seasons?: PlayerUpdateseasonsInput;
}

export interface GameCreateManyWithoutPlayerInput {
  create?: GameCreateWithoutPlayerInput[] | GameCreateWithoutPlayerInput;
  connect?: GameWhereUniqueInput[] | GameWhereUniqueInput;
}

export interface GameUpsertWithoutBoxScoreTraditionalInput {
  update: GameUpdateWithoutBoxScoreTraditionalDataInput;
  create: GameCreateWithoutBoxScoreTraditionalInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nbaStatsId?: Int;
}>;

export interface PlayerUpsertWithoutGamesInput {
  update: PlayerUpdateWithoutGamesDataInput;
  create: PlayerCreateWithoutGamesInput;
}

export interface GameUpdateInput {
  player?: PlayerUpdateOneRequiredWithoutGamesInput;
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
  team?: TeamUpdateOneRequiredInput;
  opponent?: TeamUpdateOneRequiredInput;
  boxScoreTraditional?: BoxScoreTraditionalUpdateOneWithoutGameInput;
  boxScoreAdvanced?: BoxScoreAdvancedUpdateOneWithoutGameInput;
}

export interface TeamUpdateOneRequiredInput {
  create?: TeamCreateInput;
  update?: TeamUpdateDataInput;
  upsert?: TeamUpsertNestedInput;
  connect?: TeamWhereUniqueInput;
}

export interface BoxScoreTraditionalUpdateManyMutationInput {
  points?: Int;
  minutes?: Float;
  fieldGoalsMade?: Int;
  fieldGoalsAttempted?: Int;
  fieldGoalPercentage?: Float;
  threePtsMade?: Int;
  threePtsAttempted?: Int;
  threePtPercentage?: Float;
  freeThrowsMade?: Int;
  freeThrowsAttempts?: Int;
  freeThrowsPercentage?: Float;
  rebounds?: Int;
  offensiveRebounds?: Int;
  defensiveRebounds?: Int;
  assists?: Int;
  steals?: Int;
  blocks?: Int;
  turnovers?: Int;
  plusMinus?: Int;
}

export interface TeamUpdateDataInput {
  nbaStatsId?: Int;
  name?: String;
  conference?: String;
}

export interface BoxScoreAdvancedCreateInput {
  game: GameCreateOneWithoutBoxScoreAdvancedInput;
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface BoxScoreAdvancedUpsertWithoutGameInput {
  update: BoxScoreAdvancedUpdateWithoutGameDataInput;
  create: BoxScoreAdvancedCreateWithoutGameInput;
}

export interface BoxScoreAdvancedWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  game?: GameWhereInput;
  offensiveRating?: Float;
  offensiveRating_not?: Float;
  offensiveRating_in?: Float[] | Float;
  offensiveRating_not_in?: Float[] | Float;
  offensiveRating_lt?: Float;
  offensiveRating_lte?: Float;
  offensiveRating_gt?: Float;
  offensiveRating_gte?: Float;
  defensiveRating?: Float;
  defensiveRating_not?: Float;
  defensiveRating_in?: Float[] | Float;
  defensiveRating_not_in?: Float[] | Float;
  defensiveRating_lt?: Float;
  defensiveRating_lte?: Float;
  defensiveRating_gt?: Float;
  defensiveRating_gte?: Float;
  netRating?: Float;
  netRating_not?: Float;
  netRating_in?: Float[] | Float;
  netRating_not_in?: Float[] | Float;
  netRating_lt?: Float;
  netRating_lte?: Float;
  netRating_gt?: Float;
  netRating_gte?: Float;
  assistPercentage?: Float;
  assistPercentage_not?: Float;
  assistPercentage_in?: Float[] | Float;
  assistPercentage_not_in?: Float[] | Float;
  assistPercentage_lt?: Float;
  assistPercentage_lte?: Float;
  assistPercentage_gt?: Float;
  assistPercentage_gte?: Float;
  assistToTurnovers?: Float;
  assistToTurnovers_not?: Float;
  assistToTurnovers_in?: Float[] | Float;
  assistToTurnovers_not_in?: Float[] | Float;
  assistToTurnovers_lt?: Float;
  assistToTurnovers_lte?: Float;
  assistToTurnovers_gt?: Float;
  assistToTurnovers_gte?: Float;
  assistRatio?: Float;
  assistRatio_not?: Float;
  assistRatio_in?: Float[] | Float;
  assistRatio_not_in?: Float[] | Float;
  assistRatio_lt?: Float;
  assistRatio_lte?: Float;
  assistRatio_gt?: Float;
  assistRatio_gte?: Float;
  offensiveReboundPercentage?: Float;
  offensiveReboundPercentage_not?: Float;
  offensiveReboundPercentage_in?: Float[] | Float;
  offensiveReboundPercentage_not_in?: Float[] | Float;
  offensiveReboundPercentage_lt?: Float;
  offensiveReboundPercentage_lte?: Float;
  offensiveReboundPercentage_gt?: Float;
  offensiveReboundPercentage_gte?: Float;
  defensiveReboundPercentage?: Float;
  defensiveReboundPercentage_not?: Float;
  defensiveReboundPercentage_in?: Float[] | Float;
  defensiveReboundPercentage_not_in?: Float[] | Float;
  defensiveReboundPercentage_lt?: Float;
  defensiveReboundPercentage_lte?: Float;
  defensiveReboundPercentage_gt?: Float;
  defensiveReboundPercentage_gte?: Float;
  reboundPercentage?: Float;
  reboundPercentage_not?: Float;
  reboundPercentage_in?: Float[] | Float;
  reboundPercentage_not_in?: Float[] | Float;
  reboundPercentage_lt?: Float;
  reboundPercentage_lte?: Float;
  reboundPercentage_gt?: Float;
  reboundPercentage_gte?: Float;
  effectiveFieldGoalPercentage?: Float;
  effectiveFieldGoalPercentage_not?: Float;
  effectiveFieldGoalPercentage_in?: Float[] | Float;
  effectiveFieldGoalPercentage_not_in?: Float[] | Float;
  effectiveFieldGoalPercentage_lt?: Float;
  effectiveFieldGoalPercentage_lte?: Float;
  effectiveFieldGoalPercentage_gt?: Float;
  effectiveFieldGoalPercentage_gte?: Float;
  trueShootingPercentage?: Float;
  trueShootingPercentage_not?: Float;
  trueShootingPercentage_in?: Float[] | Float;
  trueShootingPercentage_not_in?: Float[] | Float;
  trueShootingPercentage_lt?: Float;
  trueShootingPercentage_lte?: Float;
  trueShootingPercentage_gt?: Float;
  trueShootingPercentage_gte?: Float;
  usagePercentage?: Float;
  usagePercentage_not?: Float;
  usagePercentage_in?: Float[] | Float;
  usagePercentage_not_in?: Float[] | Float;
  usagePercentage_lt?: Float;
  usagePercentage_lte?: Float;
  usagePercentage_gt?: Float;
  usagePercentage_gte?: Float;
  pace?: Float;
  pace_not?: Float;
  pace_in?: Float[] | Float;
  pace_not_in?: Float[] | Float;
  pace_lt?: Float;
  pace_lte?: Float;
  pace_gt?: Float;
  pace_gte?: Float;
  PIE?: Float;
  PIE_not?: Float;
  PIE_in?: Float[] | Float;
  PIE_not_in?: Float[] | Float;
  PIE_lt?: Float;
  PIE_lte?: Float;
  PIE_gt?: Float;
  PIE_gte?: Float;
  AND?: BoxScoreAdvancedWhereInput[] | BoxScoreAdvancedWhereInput;
  OR?: BoxScoreAdvancedWhereInput[] | BoxScoreAdvancedWhereInput;
  NOT?: BoxScoreAdvancedWhereInput[] | BoxScoreAdvancedWhereInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nbaStatsId?: Int;
  nbaStatsId_not?: Int;
  nbaStatsId_in?: Int[] | Int;
  nbaStatsId_not_in?: Int[] | Int;
  nbaStatsId_lt?: Int;
  nbaStatsId_lte?: Int;
  nbaStatsId_gt?: Int;
  nbaStatsId_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  conference?: String;
  conference_not?: String;
  conference_in?: String[] | String;
  conference_not_in?: String[] | String;
  conference_lt?: String;
  conference_lte?: String;
  conference_gt?: String;
  conference_gte?: String;
  conference_contains?: String;
  conference_not_contains?: String;
  conference_starts_with?: String;
  conference_not_starts_with?: String;
  conference_ends_with?: String;
  conference_not_ends_with?: String;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface BoxScoreTraditionalSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BoxScoreTraditionalWhereInput;
  AND?:
    | BoxScoreTraditionalSubscriptionWhereInput[]
    | BoxScoreTraditionalSubscriptionWhereInput;
  OR?:
    | BoxScoreTraditionalSubscriptionWhereInput[]
    | BoxScoreTraditionalSubscriptionWhereInput;
  NOT?:
    | BoxScoreTraditionalSubscriptionWhereInput[]
    | BoxScoreTraditionalSubscriptionWhereInput;
}

export interface BoxScoreTraditionalUpdateWithoutGameDataInput {
  points?: Int;
  minutes?: Float;
  fieldGoalsMade?: Int;
  fieldGoalsAttempted?: Int;
  fieldGoalPercentage?: Float;
  threePtsMade?: Int;
  threePtsAttempted?: Int;
  threePtPercentage?: Float;
  freeThrowsMade?: Int;
  freeThrowsAttempts?: Int;
  freeThrowsPercentage?: Float;
  rebounds?: Int;
  offensiveRebounds?: Int;
  defensiveRebounds?: Int;
  assists?: Int;
  steals?: Int;
  blocks?: Int;
  turnovers?: Int;
  plusMinus?: Int;
}

export interface PlayerUpdateManyMutationInput {
  nbaStatsId?: Int;
  name?: String;
  seasons?: PlayerUpdateseasonsInput;
}

export interface BoxScoreTraditionalUpsertWithoutGameInput {
  update: BoxScoreTraditionalUpdateWithoutGameDataInput;
  create: BoxScoreTraditionalCreateWithoutGameInput;
}

export interface GameScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nbaGameId?: String;
  nbaGameId_not?: String;
  nbaGameId_in?: String[] | String;
  nbaGameId_not_in?: String[] | String;
  nbaGameId_lt?: String;
  nbaGameId_lte?: String;
  nbaGameId_gt?: String;
  nbaGameId_gte?: String;
  nbaGameId_contains?: String;
  nbaGameId_not_contains?: String;
  nbaGameId_starts_with?: String;
  nbaGameId_not_starts_with?: String;
  nbaGameId_ends_with?: String;
  nbaGameId_not_ends_with?: String;
  season?: String;
  season_not?: String;
  season_in?: String[] | String;
  season_not_in?: String[] | String;
  season_lt?: String;
  season_lte?: String;
  season_gt?: String;
  season_gte?: String;
  season_contains?: String;
  season_not_contains?: String;
  season_starts_with?: String;
  season_not_starts_with?: String;
  season_ends_with?: String;
  season_not_ends_with?: String;
  result?: String;
  result_not?: String;
  result_in?: String[] | String;
  result_not_in?: String[] | String;
  result_lt?: String;
  result_lte?: String;
  result_gt?: String;
  result_gte?: String;
  result_contains?: String;
  result_not_contains?: String;
  result_starts_with?: String;
  result_not_starts_with?: String;
  result_ends_with?: String;
  result_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  home?: Boolean;
  home_not?: Boolean;
  AND?: GameScalarWhereInput[] | GameScalarWhereInput;
  OR?: GameScalarWhereInput[] | GameScalarWhereInput;
  NOT?: GameScalarWhereInput[] | GameScalarWhereInput;
}

export interface GameUpsertWithoutBoxScoreAdvancedInput {
  update: GameUpdateWithoutBoxScoreAdvancedDataInput;
  create: GameCreateWithoutBoxScoreAdvancedInput;
}

export interface GameUpdateWithWhereUniqueWithoutPlayerInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutPlayerDataInput;
}

export interface BoxScoreAdvancedUpdateManyMutationInput {
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface GameCreateWithoutPlayerInput {
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeInput;
  home: Boolean;
  team: TeamCreateOneInput;
  opponent: TeamCreateOneInput;
  boxScoreTraditional?: BoxScoreTraditionalCreateOneWithoutGameInput;
  boxScoreAdvanced?: BoxScoreAdvancedCreateOneWithoutGameInput;
}

export interface BoxScoreAdvancedUpdateWithoutGameDataInput {
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface GameUpdateManyMutationInput {
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
}

export interface BoxScoreAdvancedUpdateOneWithoutGameInput {
  create?: BoxScoreAdvancedCreateWithoutGameInput;
  update?: BoxScoreAdvancedUpdateWithoutGameDataInput;
  upsert?: BoxScoreAdvancedUpsertWithoutGameInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BoxScoreAdvancedWhereUniqueInput;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlayerWhereInput;
  AND?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  OR?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  NOT?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
}

export interface BoxScoreTraditionalCreateInput {
  game: GameCreateOneWithoutBoxScoreTraditionalInput;
  points: Int;
  minutes: Float;
  fieldGoalsMade: Int;
  fieldGoalsAttempted: Int;
  fieldGoalPercentage: Float;
  threePtsMade: Int;
  threePtsAttempted: Int;
  threePtPercentage: Float;
  freeThrowsMade: Int;
  freeThrowsAttempts: Int;
  freeThrowsPercentage: Float;
  rebounds: Int;
  offensiveRebounds: Int;
  defensiveRebounds: Int;
  assists: Int;
  steals: Int;
  blocks: Int;
  turnovers: Int;
  plusMinus: Int;
}

export interface GameUpdateManyDataInput {
  nbaGameId?: String;
  season?: String;
  result?: String;
  date?: DateTimeInput;
  home?: Boolean;
}

export interface GameCreateOneWithoutBoxScoreTraditionalInput {
  create?: GameCreateWithoutBoxScoreTraditionalInput;
  connect?: GameWhereUniqueInput;
}

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nbaStatsId?: Int;
}>;

export interface GameCreateWithoutBoxScoreTraditionalInput {
  player: PlayerCreateOneWithoutGamesInput;
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeInput;
  home: Boolean;
  team: TeamCreateOneInput;
  opponent: TeamCreateOneInput;
  boxScoreAdvanced?: BoxScoreAdvancedCreateOneWithoutGameInput;
}

export interface GameCreateInput {
  player: PlayerCreateOneWithoutGamesInput;
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeInput;
  home: Boolean;
  team: TeamCreateOneInput;
  opponent: TeamCreateOneInput;
  boxScoreTraditional?: BoxScoreTraditionalCreateOneWithoutGameInput;
  boxScoreAdvanced?: BoxScoreAdvancedCreateOneWithoutGameInput;
}

export interface GameUpdateOneRequiredWithoutBoxScoreTraditionalInput {
  create?: GameCreateWithoutBoxScoreTraditionalInput;
  update?: GameUpdateWithoutBoxScoreTraditionalDataInput;
  upsert?: GameUpsertWithoutBoxScoreTraditionalInput;
  connect?: GameWhereUniqueInput;
}

export interface BoxScoreTraditionalUpdateInput {
  game?: GameUpdateOneRequiredWithoutBoxScoreTraditionalInput;
  points?: Int;
  minutes?: Float;
  fieldGoalsMade?: Int;
  fieldGoalsAttempted?: Int;
  fieldGoalPercentage?: Float;
  threePtsMade?: Int;
  threePtsAttempted?: Int;
  threePtPercentage?: Float;
  freeThrowsMade?: Int;
  freeThrowsAttempts?: Int;
  freeThrowsPercentage?: Float;
  rebounds?: Int;
  offensiveRebounds?: Int;
  defensiveRebounds?: Int;
  assists?: Int;
  steals?: Int;
  blocks?: Int;
  turnovers?: Int;
  plusMinus?: Int;
}

export interface BoxScoreAdvancedCreateWithoutGameInput {
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface BoxScoreAdvancedCreateOneWithoutGameInput {
  create?: BoxScoreAdvancedCreateWithoutGameInput;
  connect?: BoxScoreAdvancedWhereUniqueInput;
}

export interface BoxScoreTraditionalWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  game?: GameWhereInput;
  points?: Int;
  points_not?: Int;
  points_in?: Int[] | Int;
  points_not_in?: Int[] | Int;
  points_lt?: Int;
  points_lte?: Int;
  points_gt?: Int;
  points_gte?: Int;
  minutes?: Float;
  minutes_not?: Float;
  minutes_in?: Float[] | Float;
  minutes_not_in?: Float[] | Float;
  minutes_lt?: Float;
  minutes_lte?: Float;
  minutes_gt?: Float;
  minutes_gte?: Float;
  fieldGoalsMade?: Int;
  fieldGoalsMade_not?: Int;
  fieldGoalsMade_in?: Int[] | Int;
  fieldGoalsMade_not_in?: Int[] | Int;
  fieldGoalsMade_lt?: Int;
  fieldGoalsMade_lte?: Int;
  fieldGoalsMade_gt?: Int;
  fieldGoalsMade_gte?: Int;
  fieldGoalsAttempted?: Int;
  fieldGoalsAttempted_not?: Int;
  fieldGoalsAttempted_in?: Int[] | Int;
  fieldGoalsAttempted_not_in?: Int[] | Int;
  fieldGoalsAttempted_lt?: Int;
  fieldGoalsAttempted_lte?: Int;
  fieldGoalsAttempted_gt?: Int;
  fieldGoalsAttempted_gte?: Int;
  fieldGoalPercentage?: Float;
  fieldGoalPercentage_not?: Float;
  fieldGoalPercentage_in?: Float[] | Float;
  fieldGoalPercentage_not_in?: Float[] | Float;
  fieldGoalPercentage_lt?: Float;
  fieldGoalPercentage_lte?: Float;
  fieldGoalPercentage_gt?: Float;
  fieldGoalPercentage_gte?: Float;
  threePtsMade?: Int;
  threePtsMade_not?: Int;
  threePtsMade_in?: Int[] | Int;
  threePtsMade_not_in?: Int[] | Int;
  threePtsMade_lt?: Int;
  threePtsMade_lte?: Int;
  threePtsMade_gt?: Int;
  threePtsMade_gte?: Int;
  threePtsAttempted?: Int;
  threePtsAttempted_not?: Int;
  threePtsAttempted_in?: Int[] | Int;
  threePtsAttempted_not_in?: Int[] | Int;
  threePtsAttempted_lt?: Int;
  threePtsAttempted_lte?: Int;
  threePtsAttempted_gt?: Int;
  threePtsAttempted_gte?: Int;
  threePtPercentage?: Float;
  threePtPercentage_not?: Float;
  threePtPercentage_in?: Float[] | Float;
  threePtPercentage_not_in?: Float[] | Float;
  threePtPercentage_lt?: Float;
  threePtPercentage_lte?: Float;
  threePtPercentage_gt?: Float;
  threePtPercentage_gte?: Float;
  freeThrowsMade?: Int;
  freeThrowsMade_not?: Int;
  freeThrowsMade_in?: Int[] | Int;
  freeThrowsMade_not_in?: Int[] | Int;
  freeThrowsMade_lt?: Int;
  freeThrowsMade_lte?: Int;
  freeThrowsMade_gt?: Int;
  freeThrowsMade_gte?: Int;
  freeThrowsAttempts?: Int;
  freeThrowsAttempts_not?: Int;
  freeThrowsAttempts_in?: Int[] | Int;
  freeThrowsAttempts_not_in?: Int[] | Int;
  freeThrowsAttempts_lt?: Int;
  freeThrowsAttempts_lte?: Int;
  freeThrowsAttempts_gt?: Int;
  freeThrowsAttempts_gte?: Int;
  freeThrowsPercentage?: Float;
  freeThrowsPercentage_not?: Float;
  freeThrowsPercentage_in?: Float[] | Float;
  freeThrowsPercentage_not_in?: Float[] | Float;
  freeThrowsPercentage_lt?: Float;
  freeThrowsPercentage_lte?: Float;
  freeThrowsPercentage_gt?: Float;
  freeThrowsPercentage_gte?: Float;
  rebounds?: Int;
  rebounds_not?: Int;
  rebounds_in?: Int[] | Int;
  rebounds_not_in?: Int[] | Int;
  rebounds_lt?: Int;
  rebounds_lte?: Int;
  rebounds_gt?: Int;
  rebounds_gte?: Int;
  offensiveRebounds?: Int;
  offensiveRebounds_not?: Int;
  offensiveRebounds_in?: Int[] | Int;
  offensiveRebounds_not_in?: Int[] | Int;
  offensiveRebounds_lt?: Int;
  offensiveRebounds_lte?: Int;
  offensiveRebounds_gt?: Int;
  offensiveRebounds_gte?: Int;
  defensiveRebounds?: Int;
  defensiveRebounds_not?: Int;
  defensiveRebounds_in?: Int[] | Int;
  defensiveRebounds_not_in?: Int[] | Int;
  defensiveRebounds_lt?: Int;
  defensiveRebounds_lte?: Int;
  defensiveRebounds_gt?: Int;
  defensiveRebounds_gte?: Int;
  assists?: Int;
  assists_not?: Int;
  assists_in?: Int[] | Int;
  assists_not_in?: Int[] | Int;
  assists_lt?: Int;
  assists_lte?: Int;
  assists_gt?: Int;
  assists_gte?: Int;
  steals?: Int;
  steals_not?: Int;
  steals_in?: Int[] | Int;
  steals_not_in?: Int[] | Int;
  steals_lt?: Int;
  steals_lte?: Int;
  steals_gt?: Int;
  steals_gte?: Int;
  blocks?: Int;
  blocks_not?: Int;
  blocks_in?: Int[] | Int;
  blocks_not_in?: Int[] | Int;
  blocks_lt?: Int;
  blocks_lte?: Int;
  blocks_gt?: Int;
  blocks_gte?: Int;
  turnovers?: Int;
  turnovers_not?: Int;
  turnovers_in?: Int[] | Int;
  turnovers_not_in?: Int[] | Int;
  turnovers_lt?: Int;
  turnovers_lte?: Int;
  turnovers_gt?: Int;
  turnovers_gte?: Int;
  plusMinus?: Int;
  plusMinus_not?: Int;
  plusMinus_in?: Int[] | Int;
  plusMinus_not_in?: Int[] | Int;
  plusMinus_lt?: Int;
  plusMinus_lte?: Int;
  plusMinus_gt?: Int;
  plusMinus_gte?: Int;
  AND?: BoxScoreTraditionalWhereInput[] | BoxScoreTraditionalWhereInput;
  OR?: BoxScoreTraditionalWhereInput[] | BoxScoreTraditionalWhereInput;
  NOT?: BoxScoreTraditionalWhereInput[] | BoxScoreTraditionalWhereInput;
}

export interface PlayerCreateInput {
  nbaStatsId: Int;
  name: String;
  seasons?: PlayerCreateseasonsInput;
  Games?: GameCreateManyWithoutPlayerInput;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nbaGameId?: String;
}>;

export interface TeamUpdateManyMutationInput {
  nbaStatsId?: Int;
  name?: String;
  conference?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TeamPreviousValues {
  id: ID_Output;
  nbaStatsId: Int;
  name: String;
  conference: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nbaStatsId: () => Promise<Int>;
  name: () => Promise<String>;
  conference: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nbaStatsId: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  conference: () => Promise<AsyncIterator<String>>;
}

export interface BoxScoreTraditionalEdge {
  node: BoxScoreTraditional;
  cursor: String;
}

export interface BoxScoreTraditionalEdgePromise
  extends Promise<BoxScoreTraditionalEdge>,
    Fragmentable {
  node: <T = BoxScoreTraditionalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoxScoreTraditionalEdgeSubscription
  extends Promise<AsyncIterator<BoxScoreTraditionalEdge>>,
    Fragmentable {
  node: <T = BoxScoreTraditionalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GamePreviousValues {
  id: ID_Output;
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeOutput;
  home: Boolean;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nbaGameId: () => Promise<String>;
  season: () => Promise<String>;
  result: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  home: () => Promise<Boolean>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nbaGameId: () => Promise<AsyncIterator<String>>;
  season: () => Promise<AsyncIterator<String>>;
  result: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  home: () => Promise<AsyncIterator<Boolean>>;
}

export interface BoxScoreTraditionalConnection {
  pageInfo: PageInfo;
  edges: BoxScoreTraditionalEdge[];
}

export interface BoxScoreTraditionalConnectionPromise
  extends Promise<BoxScoreTraditionalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoxScoreTraditionalEdge>>() => T;
  aggregate: <T = AggregateBoxScoreTraditionalPromise>() => T;
}

export interface BoxScoreTraditionalConnectionSubscription
  extends Promise<AsyncIterator<BoxScoreTraditionalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<BoxScoreTraditionalEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateBoxScoreTraditionalSubscription>() => T;
}

export interface AggregateBoxScoreAdvanced {
  count: Int;
}

export interface AggregateBoxScoreAdvancedPromise
  extends Promise<AggregateBoxScoreAdvanced>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoxScoreAdvancedSubscription
  extends Promise<AsyncIterator<AggregateBoxScoreAdvanced>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  node: Player;
  updatedFields: String[];
  previousValues: PlayerPreviousValues;
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValuesPromise>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface PlayerPreviousValues {
  id: ID_Output;
  nbaStatsId: Int;
  name: String;
  seasons: String[];
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nbaStatsId: () => Promise<Int>;
  name: () => Promise<String>;
  seasons: () => Promise<String[]>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nbaStatsId: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  seasons: () => Promise<AsyncIterator<String[]>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoxScoreAdvancedEdge {
  node: BoxScoreAdvanced;
  cursor: String;
}

export interface BoxScoreAdvancedEdgePromise
  extends Promise<BoxScoreAdvancedEdge>,
    Fragmentable {
  node: <T = BoxScoreAdvancedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoxScoreAdvancedEdgeSubscription
  extends Promise<AsyncIterator<BoxScoreAdvancedEdge>>,
    Fragmentable {
  node: <T = BoxScoreAdvancedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Game {
  id: ID_Output;
  nbaGameId: String;
  season: String;
  result: String;
  date: DateTimeOutput;
  home: Boolean;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  player: <T = PlayerPromise>() => T;
  nbaGameId: () => Promise<String>;
  season: () => Promise<String>;
  result: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  home: () => Promise<Boolean>;
  team: <T = TeamPromise>() => T;
  opponent: <T = TeamPromise>() => T;
  boxScoreTraditional: <T = BoxScoreTraditionalPromise>() => T;
  boxScoreAdvanced: <T = BoxScoreAdvancedPromise>() => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  player: <T = PlayerSubscription>() => T;
  nbaGameId: () => Promise<AsyncIterator<String>>;
  season: () => Promise<AsyncIterator<String>>;
  result: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  home: () => Promise<AsyncIterator<Boolean>>;
  team: <T = TeamSubscription>() => T;
  opponent: <T = TeamSubscription>() => T;
  boxScoreTraditional: <T = BoxScoreTraditionalSubscription>() => T;
  boxScoreAdvanced: <T = BoxScoreAdvancedSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlayerEdge {
  node: Player;
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = PlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoxScoreAdvancedConnection {
  pageInfo: PageInfo;
  edges: BoxScoreAdvancedEdge[];
}

export interface BoxScoreAdvancedConnectionPromise
  extends Promise<BoxScoreAdvancedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoxScoreAdvancedEdge>>() => T;
  aggregate: <T = AggregateBoxScoreAdvancedPromise>() => T;
}

export interface BoxScoreAdvancedConnectionSubscription
  extends Promise<AsyncIterator<BoxScoreAdvancedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoxScoreAdvancedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoxScoreAdvancedSubscription>() => T;
}

export interface Player {
  id: ID_Output;
  nbaStatsId: Int;
  name: String;
  seasons: String[];
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  id: () => Promise<ID_Output>;
  nbaStatsId: () => Promise<Int>;
  name: () => Promise<String>;
  seasons: () => Promise<String[]>;
  Games: <T = FragmentableArray<Game>>(
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nbaStatsId: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  seasons: () => Promise<AsyncIterator<String[]>>;
  Games: <T = Promise<AsyncIterator<GameSubscription>>>(
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BoxScoreAdvanced {
  id: ID_Output;
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface BoxScoreAdvancedPromise
  extends Promise<BoxScoreAdvanced>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  game: <T = GamePromise>() => T;
  offensiveRating: () => Promise<Float>;
  defensiveRating: () => Promise<Float>;
  netRating: () => Promise<Float>;
  assistPercentage: () => Promise<Float>;
  assistToTurnovers: () => Promise<Float>;
  assistRatio: () => Promise<Float>;
  offensiveReboundPercentage: () => Promise<Float>;
  defensiveReboundPercentage: () => Promise<Float>;
  reboundPercentage: () => Promise<Float>;
  effectiveFieldGoalPercentage: () => Promise<Float>;
  trueShootingPercentage: () => Promise<Float>;
  usagePercentage: () => Promise<Float>;
  pace: () => Promise<Float>;
  PIE: () => Promise<Float>;
}

export interface BoxScoreAdvancedSubscription
  extends Promise<AsyncIterator<BoxScoreAdvanced>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  game: <T = GameSubscription>() => T;
  offensiveRating: () => Promise<AsyncIterator<Float>>;
  defensiveRating: () => Promise<AsyncIterator<Float>>;
  netRating: () => Promise<AsyncIterator<Float>>;
  assistPercentage: () => Promise<AsyncIterator<Float>>;
  assistToTurnovers: () => Promise<AsyncIterator<Float>>;
  assistRatio: () => Promise<AsyncIterator<Float>>;
  offensiveReboundPercentage: () => Promise<AsyncIterator<Float>>;
  defensiveReboundPercentage: () => Promise<AsyncIterator<Float>>;
  reboundPercentage: () => Promise<AsyncIterator<Float>>;
  effectiveFieldGoalPercentage: () => Promise<AsyncIterator<Float>>;
  trueShootingPercentage: () => Promise<AsyncIterator<Float>>;
  usagePercentage: () => Promise<AsyncIterator<Float>>;
  pace: () => Promise<AsyncIterator<Float>>;
  PIE: () => Promise<AsyncIterator<Float>>;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoxScoreAdvancedSubscriptionPayload {
  mutation: MutationType;
  node: BoxScoreAdvanced;
  updatedFields: String[];
  previousValues: BoxScoreAdvancedPreviousValues;
}

export interface BoxScoreAdvancedSubscriptionPayloadPromise
  extends Promise<BoxScoreAdvancedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoxScoreAdvancedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoxScoreAdvancedPreviousValuesPromise>() => T;
}

export interface BoxScoreAdvancedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoxScoreAdvancedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoxScoreAdvancedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoxScoreAdvancedPreviousValuesSubscription>() => T;
}

export interface AggregateBoxScoreTraditional {
  count: Int;
}

export interface AggregateBoxScoreTraditionalPromise
  extends Promise<AggregateBoxScoreTraditional>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoxScoreTraditionalSubscription
  extends Promise<AsyncIterator<AggregateBoxScoreTraditional>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoxScoreAdvancedPreviousValues {
  id: ID_Output;
  offensiveRating?: Float;
  defensiveRating?: Float;
  netRating?: Float;
  assistPercentage?: Float;
  assistToTurnovers?: Float;
  assistRatio?: Float;
  offensiveReboundPercentage?: Float;
  defensiveReboundPercentage?: Float;
  reboundPercentage?: Float;
  effectiveFieldGoalPercentage?: Float;
  trueShootingPercentage?: Float;
  usagePercentage?: Float;
  pace?: Float;
  PIE?: Float;
}

export interface BoxScoreAdvancedPreviousValuesPromise
  extends Promise<BoxScoreAdvancedPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  offensiveRating: () => Promise<Float>;
  defensiveRating: () => Promise<Float>;
  netRating: () => Promise<Float>;
  assistPercentage: () => Promise<Float>;
  assistToTurnovers: () => Promise<Float>;
  assistRatio: () => Promise<Float>;
  offensiveReboundPercentage: () => Promise<Float>;
  defensiveReboundPercentage: () => Promise<Float>;
  reboundPercentage: () => Promise<Float>;
  effectiveFieldGoalPercentage: () => Promise<Float>;
  trueShootingPercentage: () => Promise<Float>;
  usagePercentage: () => Promise<Float>;
  pace: () => Promise<Float>;
  PIE: () => Promise<Float>;
}

export interface BoxScoreAdvancedPreviousValuesSubscription
  extends Promise<AsyncIterator<BoxScoreAdvancedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  offensiveRating: () => Promise<AsyncIterator<Float>>;
  defensiveRating: () => Promise<AsyncIterator<Float>>;
  netRating: () => Promise<AsyncIterator<Float>>;
  assistPercentage: () => Promise<AsyncIterator<Float>>;
  assistToTurnovers: () => Promise<AsyncIterator<Float>>;
  assistRatio: () => Promise<AsyncIterator<Float>>;
  offensiveReboundPercentage: () => Promise<AsyncIterator<Float>>;
  defensiveReboundPercentage: () => Promise<AsyncIterator<Float>>;
  reboundPercentage: () => Promise<AsyncIterator<Float>>;
  effectiveFieldGoalPercentage: () => Promise<AsyncIterator<Float>>;
  trueShootingPercentage: () => Promise<AsyncIterator<Float>>;
  usagePercentage: () => Promise<AsyncIterator<Float>>;
  pace: () => Promise<AsyncIterator<Float>>;
  PIE: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Team {
  id: ID_Output;
  nbaStatsId: Int;
  name: String;
  conference: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  nbaStatsId: () => Promise<Int>;
  name: () => Promise<String>;
  conference: () => Promise<String>;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nbaStatsId: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  conference: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface BoxScoreTraditional {
  id: ID_Output;
  points: Int;
  minutes: Float;
  fieldGoalsMade: Int;
  fieldGoalsAttempted: Int;
  fieldGoalPercentage: Float;
  threePtsMade: Int;
  threePtsAttempted: Int;
  threePtPercentage: Float;
  freeThrowsMade: Int;
  freeThrowsAttempts: Int;
  freeThrowsPercentage: Float;
  rebounds: Int;
  offensiveRebounds: Int;
  defensiveRebounds: Int;
  assists: Int;
  steals: Int;
  blocks: Int;
  turnovers: Int;
  plusMinus: Int;
}

export interface BoxScoreTraditionalPromise
  extends Promise<BoxScoreTraditional>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  game: <T = GamePromise>() => T;
  points: () => Promise<Int>;
  minutes: () => Promise<Float>;
  fieldGoalsMade: () => Promise<Int>;
  fieldGoalsAttempted: () => Promise<Int>;
  fieldGoalPercentage: () => Promise<Float>;
  threePtsMade: () => Promise<Int>;
  threePtsAttempted: () => Promise<Int>;
  threePtPercentage: () => Promise<Float>;
  freeThrowsMade: () => Promise<Int>;
  freeThrowsAttempts: () => Promise<Int>;
  freeThrowsPercentage: () => Promise<Float>;
  rebounds: () => Promise<Int>;
  offensiveRebounds: () => Promise<Int>;
  defensiveRebounds: () => Promise<Int>;
  assists: () => Promise<Int>;
  steals: () => Promise<Int>;
  blocks: () => Promise<Int>;
  turnovers: () => Promise<Int>;
  plusMinus: () => Promise<Int>;
}

export interface BoxScoreTraditionalSubscription
  extends Promise<AsyncIterator<BoxScoreTraditional>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  game: <T = GameSubscription>() => T;
  points: () => Promise<AsyncIterator<Int>>;
  minutes: () => Promise<AsyncIterator<Float>>;
  fieldGoalsMade: () => Promise<AsyncIterator<Int>>;
  fieldGoalsAttempted: () => Promise<AsyncIterator<Int>>;
  fieldGoalPercentage: () => Promise<AsyncIterator<Float>>;
  threePtsMade: () => Promise<AsyncIterator<Int>>;
  threePtsAttempted: () => Promise<AsyncIterator<Int>>;
  threePtPercentage: () => Promise<AsyncIterator<Float>>;
  freeThrowsMade: () => Promise<AsyncIterator<Int>>;
  freeThrowsAttempts: () => Promise<AsyncIterator<Int>>;
  freeThrowsPercentage: () => Promise<AsyncIterator<Float>>;
  rebounds: () => Promise<AsyncIterator<Int>>;
  offensiveRebounds: () => Promise<AsyncIterator<Int>>;
  defensiveRebounds: () => Promise<AsyncIterator<Int>>;
  assists: () => Promise<AsyncIterator<Int>>;
  steals: () => Promise<AsyncIterator<Int>>;
  blocks: () => Promise<AsyncIterator<Int>>;
  turnovers: () => Promise<AsyncIterator<Int>>;
  plusMinus: () => Promise<AsyncIterator<Int>>;
}

export interface BoxScoreTraditionalPreviousValues {
  id: ID_Output;
  points: Int;
  minutes: Float;
  fieldGoalsMade: Int;
  fieldGoalsAttempted: Int;
  fieldGoalPercentage: Float;
  threePtsMade: Int;
  threePtsAttempted: Int;
  threePtPercentage: Float;
  freeThrowsMade: Int;
  freeThrowsAttempts: Int;
  freeThrowsPercentage: Float;
  rebounds: Int;
  offensiveRebounds: Int;
  defensiveRebounds: Int;
  assists: Int;
  steals: Int;
  blocks: Int;
  turnovers: Int;
  plusMinus: Int;
}

export interface BoxScoreTraditionalPreviousValuesPromise
  extends Promise<BoxScoreTraditionalPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  points: () => Promise<Int>;
  minutes: () => Promise<Float>;
  fieldGoalsMade: () => Promise<Int>;
  fieldGoalsAttempted: () => Promise<Int>;
  fieldGoalPercentage: () => Promise<Float>;
  threePtsMade: () => Promise<Int>;
  threePtsAttempted: () => Promise<Int>;
  threePtPercentage: () => Promise<Float>;
  freeThrowsMade: () => Promise<Int>;
  freeThrowsAttempts: () => Promise<Int>;
  freeThrowsPercentage: () => Promise<Float>;
  rebounds: () => Promise<Int>;
  offensiveRebounds: () => Promise<Int>;
  defensiveRebounds: () => Promise<Int>;
  assists: () => Promise<Int>;
  steals: () => Promise<Int>;
  blocks: () => Promise<Int>;
  turnovers: () => Promise<Int>;
  plusMinus: () => Promise<Int>;
}

export interface BoxScoreTraditionalPreviousValuesSubscription
  extends Promise<AsyncIterator<BoxScoreTraditionalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  points: () => Promise<AsyncIterator<Int>>;
  minutes: () => Promise<AsyncIterator<Float>>;
  fieldGoalsMade: () => Promise<AsyncIterator<Int>>;
  fieldGoalsAttempted: () => Promise<AsyncIterator<Int>>;
  fieldGoalPercentage: () => Promise<AsyncIterator<Float>>;
  threePtsMade: () => Promise<AsyncIterator<Int>>;
  threePtsAttempted: () => Promise<AsyncIterator<Int>>;
  threePtPercentage: () => Promise<AsyncIterator<Float>>;
  freeThrowsMade: () => Promise<AsyncIterator<Int>>;
  freeThrowsAttempts: () => Promise<AsyncIterator<Int>>;
  freeThrowsPercentage: () => Promise<AsyncIterator<Float>>;
  rebounds: () => Promise<AsyncIterator<Int>>;
  offensiveRebounds: () => Promise<AsyncIterator<Int>>;
  defensiveRebounds: () => Promise<AsyncIterator<Int>>;
  assists: () => Promise<AsyncIterator<Int>>;
  steals: () => Promise<AsyncIterator<Int>>;
  blocks: () => Promise<AsyncIterator<Int>>;
  turnovers: () => Promise<AsyncIterator<Int>>;
  plusMinus: () => Promise<AsyncIterator<Int>>;
}

export interface BoxScoreTraditionalSubscriptionPayload {
  mutation: MutationType;
  node: BoxScoreTraditional;
  updatedFields: String[];
  previousValues: BoxScoreTraditionalPreviousValues;
}

export interface BoxScoreTraditionalSubscriptionPayloadPromise
  extends Promise<BoxScoreTraditionalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoxScoreTraditionalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoxScoreTraditionalPreviousValuesPromise>() => T;
}

export interface BoxScoreTraditionalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoxScoreTraditionalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoxScoreTraditionalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoxScoreTraditionalPreviousValuesSubscription>() => T;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface PlayerConnection {
  pageInfo: PageInfo;
  edges: PlayerEdge[];
}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayerPromise>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Player",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "BoxScoreTraditional",
    embedded: false
  },
  {
    name: "BoxScoreAdvanced",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
